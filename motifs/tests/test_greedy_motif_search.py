import unittest

from motifs.consensus import consensus
from motifs.greedy_motif_search import greedy_motif_search
from motifs.score import score

from motifs.count_matrix import get_count


class TestGreedyMotifSearch(unittest.TestCase):
    def test_greedy_motif_search_0(self):
        dna = [
            'GGCGTTCAGGCA',
            'AAGAATCAGTCA',
            'CAAGGAGTTCGC',
            'CACGTCAATCAC',
            'CAATAATATTCG',
        ]
        k = 3
        t = len(dna)
        expected = [
            'CAG',
            'CAG',
            'CAA',
            'CAA',
            'CAA',
        ]

        result = greedy_motif_search(dna, k, t)
        self.assertEqual(expected, result)

        cons = consensus(get_count(expected))
        self.assertEqual(2, score(result, cons))

    def test_greedy_motif_search_1(self):
        dna = [
            "GCCCAA",
            "GGCCTG",
            "AACCTA",
            "TTCCTT",
        ]
        k = 3
        t = len(dna)
        expected = [
            "GCC",
            "GCC",
            "AAC",
            "TTC",
        ]
        result = greedy_motif_search(dna, k, t)
        self.assertEqual(expected, result)

    def test_greedy_motif_search_2(self):
        dna = [
            "GAGGCGCACATCATTATCGATAACGATTCGCCGCATTGCC",
            "TCATCGAATCCGATAACTGACACCTGCTCTGGCACCGCTC",
            "TCGGCGGTATAGCCAGAAAGCGTAGTGCCAATAATTTCCT",
            "GAGTCGTGGTGAAGTGTGGGTTATGGGGAAAGGCAGACTG",
            "GACGGCAACTACGGTTACAACGCAGCAACCGAAGAATATT",
            "TCTGTTGTTGCTAACACCGTTAAAGGCGGCGACGGCAACT",
            "AAGCGGCCAACGTAGGCGCGGCTTGGCATCTCGGTGTGTG",
            "AATTGAAAGGCGCATCTTACTCTTTTCGCTTTCAAAAAAA",
        ]
        k = 5
        t = len(dna)
        expected = [
            "GAGGC",
            "TCATC",
            "TCGGC",
            "GAGTC",
            "GCAGC",
            "GCGGC",
            "GCGGC",
            "GCATC",
        ]
        result = greedy_motif_search(dna, k, t)
        self.assertEqual(expected, result)

    def test_greedy_motif_search_3(self):
        dna = [
            "GCAGGTTAATACCGCGGATCAGCTGAGAAACCGGAATGTGCGT",
            "CCTGCATGCCCGGTTTGAGGAACATCAGCGAAGAACTGTGCGT",
            "GCGCCAGTAACCCGTGCCAGTCAGGTTAATGGCAGTAACATTT",
            "AACCCGTGCCAGTCAGGTTAATGGCAGTAACATTTATGCCTTC",
            "ATGCCTTCCGCGCCAATTGTTCGTATCGTCGCCACTTCGAGTG",
        ]
        k = 6
        t = len(dna)
        expected = [
            "GTGCGT",
            "GTGCGT",
            "GCGCCA",
            "GTGCCA",
            "GCGCCA",
        ]
        result = greedy_motif_search(dna, k, t)
        self.assertEqual(expected, result)

    def test_greedy_motif_search_4(self):
        dna = [
            "GACCTACGGTTACAACGCAGCAACCGAAGAATATTGGCAA",
            "TCATTATCGATAACGATTCGCCGGAGGCCATTGCCGCACA",
            "GGAGTCTGGTGAAGTGTGGGTTATGGGGCAGACTGGGAAA",
            "GAATCCGATAACTGACACCTGCTCTGGCACCGCTCTCATC",
            "AAGCGCGTAGGCGCGGCTTGGCATCTCGGTGTGTGGCCAA",
            "AATTGAAAGGCGCATCTTACTCTTTTCGCTTAAAATCAAA",
            "GGTATAGCCAGAAAGCGTAGTTAATTTCGGCTCCTGCCAA",
            "TCTGTTGTTGCTAACACCGTTAAAGGCGGCGACGGCAACT",
        ]
        k = 5
        t = len(dna)
        expected = [
            "GCAGC",
            "TCATT",
            "GGAGT",
            "TCATC",
            "GCATC",
            "GCATC",
            "GGTAT",
            "GCAAC",
        ]
        result = greedy_motif_search(dna, k, t)
        self.assertEqual(expected, result)

    def test_greedy_motif_search_5(self):
        dna = [
            "GACCTACGGTTACAACGCAGCAACCGAAGAATATTGGCAA",
            "TCATTATCGATAACGATTCGCCGGAGGCCATTGCCGCACA",
            "GGAGTCTGGTGAAGTGTGGGTTATGGGGCAGACTGGGAAA",
            "GAATCCGATAACTGACACCTGCTCTGGCACCGCTCTCATC",
            "AAGCGCGTAGGCGCGGCTTGGCATCTCGGTGTGTGGCCAA",
            "AATTGAAAGGCGCATCTTACTCTTTTCGCTTAAAATCAAA",
            "GGTATAGCCAGAAAGCGTAGTTAATTTCGGCTCCTGCCAA",
            "TCTGTTGTTGCTAACACCGTTAAAGGCGGCGACGGCAACT",
        ]
        k = 4
        t = len(dna)
        expected = [
            "CGCA",
            "CGCA",
            "GGAG",
            "GGCA",
            "GGCA",
            "CGCA",
            "GGTA",
            "GGCA",
        ]
        result = greedy_motif_search(dna, k, t)
        self.assertEqual(expected, result)

    # @unittest.skip('too long')
    def test_greedy_motif_search_heavy(self):
        dna = [
            'GCGCCCCGCCCGGACAGCCATGCGCTAACCCTGGCTTCGATGGCGCCGGCTCAGTTAGGGCCGGAAGTCCCCAATGTGGCAGACCTTTCGCCCCTGGCGGACGAATGACCCCAGTGGCCGGGACTTCAGGCCCTATCGGAGGGCTCCGGCGCGGTGGTCGGATTTGTCTGTGGAGGTTACACCCCAATCGCAAGGATGCATTATGACCAGCGAGCTGAGCCTGGTCGCCACTGGAAAGGGGAGCAACATC',
            'CCGATCGGCATCACTATCGGTCCTGCGGCCGCCCATAGCGCTATATCCGGCTGGTGAAATCAATTGACAACCTTCGACTTTGAGGTGGCCTACGGCGAGGACAAGCCAGGCAAGCCAGCTGCCTCAACGCGCGCCAGTACGGGTCCATCGACCCGCGGCCCACGGGTCAAACGACCCTAGTGTTCGCTACGACGTGGTCGTACCTTCGGCAGCAGATCAGCAATAGCACCCCGACTCGAGGAGGATCCCG',
            'ACCGTCGATGTGCCCGGTCGCGCCGCGTCCACCTCGGTCATCGACCCCACGATGAGGACGCCATCGGCCGCGACCAAGCCCCGTGAAACTCTGACGGCGTGCTGGCCGGGCTGCGGCACCTGATCACCTTAGGGCACTTGGGCCACCACAACGGGCCGCCGGTCTCGACAGTGGCCACCACCACACAGGTGACTTCCGGCGGGACGTAAGTCCCTAACGCGTCGTTCCGCACGCGGTTAGCTTTGCTGCC',
            'GGGTCAGGTATATTTATCGCACACTTGGGCACATGACACACAAGCGCCAGAATCCCGGACCGAACCGAGCACCGTGGGTGGGCAGCCTCCATACAGCGATGACCTGATCGATCATCGGCCAGGGCGCCGGGCTTCCAACCGTGGCCGTCTCAGTACCCAGCCTCATTGACCCTTCGACGCATCCACTGCGCGTAAGTCGGCTCAACCCTTTCAAACCGCTGGATTACCGACCGCAGAAAGGGGGCAGGAC',
            'GTAGGTCAAACCGGGTGTACATACCCGCTCAATCGCCCAGCACTTCGGGCAGATCACCGGGTTTCCCCGGTATCACCAATACTGCCACCAAACACAGCAGGCGGGAAGGGGCGAAAGTCCCTTATCCGACAATAAAACTTCGCTTGTTCGACGCCCGGTTCACCCGATATGCACGGCGCCCAGCCATTCGTGACCGACGTCCCCAGCCCCAAGGCCGAACGACCCTAGGAGCCACGAGCAATTCACAGCG',
            'CCGCTGGCGACGCTGTTCGCCGGCAGCGTGCGTGACGACTTCGAGCTGCCCGACTACACCTGGTGACCACCGCCGACGGGCACCTCTCCGCCAGGTAGGCACGGTTTGTCGCCGGCAATGTGACCTTTGGGCGCGGTCTTGAGGACCTTCGGCCCCACCCACGAGGCCGCCGCCGGCCGATCGTATGACGTGCAATGTACGCCATAGGGTGCGTGTTACGGCGATTACCTGAAGGCGGCGGTGGTCCGGA',
            'GGCCAACTGCACCGCGCTCTTGATGACATCGGTGGTCACCATGGTGTCCGGCATGATCAACCTCCGCTGTTCGATATCACCCCGATCTTTCTGAACGGCGGTTGGCAGACAACAGGGTCAATGGTCCCCAAGTGGATCACCGACGGGCGCGGACAAATGGCCCGCGCTTCGGGGACTTCTGTCCCTAGCCCTGGCCACGATGGGCTGGTCGGATCAAAGGCATCCGTTTCCATCGATTAGGAGGCATCAA',
            'GTACATGTCCAGAGCGAGCCTCAGCTTCTGCGCAGCGACGGAAACTGCCACACTCAAAGCCTACTGGGCGCACGTGTGGCAACGAGTCGATCCACACGAAATGCCGCCGTTGGGCCGCGGACTAGCCGAATTTTCCGGGTGGTGACACAGCCCACATTTGGCATGGGACTTTCGGCCCTGTCCGCGTCCGTGTCGGCCAGACAAGCTTTGGGCATTGGCCACAATCGGGCCACAATCGAAAGCCGAGCAG',
            'GGCAGCTGTCGGCAACTGTAAGCCATTTCTGGGACTTTGCTGTGAAAAGCTGGGCGATGGTTGTGGACCTGGACGAGCCACCCGTGCGATAGGTGAGATTCATTCTCGCCCTGACGGGTTGCGTCTGTCATCGGTCGATAAGGACTAACGGCCCTCAGGTGGGGACCAACGCCCCTGGGAGATAGCGGTCCCCGCCAGTAACGTACCGCTGAACCGACGGGATGTATCCGCCCCAGCGAAGGAGACGGCG',
            'TCAGCACCATGACCGCCTGGCCACCAATCGCCCGTAACAAGCGGGACGTCCGCGACGACGCGTGCGCTAGCGCCGTGGCGGTGACAACGACCAGATATGGTCCGAGCACGCGGGCGAACCTCGTGTTCTGGCCTCGGCCAGTTGTGTAGAGCTCATCGCTGTCATCGAGCGATATCCGACCACTGATCCAAGTCGGGGGCTCTGGGGACCGAAGTCCCCGGGCTCGGAGCTATCGGACCTCACGATCACC',
        ]
        k = 15
        t = len(dna)
        expected = [
            'GTTAGGGCCGGAAGT',
            'CCGATCGGCATCACT',
            'ACCGTCGATGTGCCC',
            'GGGTCAGGTATATTT',
            'GTGACCGACGTCCCC',
            'CTGTTCGCCGGCAGC',
            'CTGTTCGATATCACC',
            'GTACATGTCCAGAGC',
            'GCGATAGGTGAGATT',
            'CTCATCGCTGTCATC'
        ]

        from motifs.count_matrix import get_count

        expected_consensus = 'gttAAAtAgaGatGtG'.upper()
        expected_score = 58

        result = greedy_motif_search(dna, k, t)
        self.assertEqual(expected, result)

        cons = consensus(get_count(result))
        print(cons)
        # self.assertEqual(expected_consensus, cons)
        # self.assertEqual(expected_score, score(result, cons))