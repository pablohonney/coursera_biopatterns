import unittest

from motifs.consensus import consensus
from motifs.greedy_motif_search_with_pseudocounts import greedy_motif_search_with_pseudocounts
from motifs.score import score
from motifs.count_matrix import get_count


class TestGreedyMotifSearchWithPseudocounts(unittest.TestCase):
    def test_greedy_motif_search_with_pseudocounts_0(self):
        dna = [
            'GGCGTTCAGGCA',
            'AAGAATCAGTCA',
            'CAAGGAGTTCGC',
            'CACGTCAATCAC',
            'CAATAATATTCG',
        ]
        k = 3
        t = len(dna)
        expected = [
            "TTC",
            "ATC",
            "TTC",
            "ATC",
            "TTC",
        ]
        expected_score = 2

        result = greedy_motif_search_with_pseudocounts(dna, k, t)
        self.assertEqual(expected, result)
        self.assertEqual(expected_score, score(result, consensus(get_count(result))))

    def test_greedy_motif_search_with_pseudocounts_1(self):
        dna = [
            "AGGCGGCACATCATTATCGATAACGATTCGCCGCATTGCC",
            "ATCCGTCATCGAATAACTGACACCTGCTCTGGCACCGCTC",
            "AAGCGTCGGCGGTATAGCCAGATAGTGCCAATAATTTCCT",
            "AGTCGGTGGTGAAGTGTGGGTTATGGGGAAAGGCAGACTG",
            "AACCGGACGGCAACTACGGTTACAACGCAGCAAGAATATT",
            "AGGCGTCTGTTGTTGCTAACACCGTTAAGCGACGGCAACT",
            "AAGCGGCCAACGTAGGCGCGGCTTGGCATCTCGGTGTGTG",
            "AATTGAAAGGCGCATCTTACTCTTTTCGCTTTCAAAAAAA",
        ]
        k = 5
        t = len(dna)
        expected = [
            "AGGCG",
            "ATCCG",
            "AAGCG",
            "AGTCG",
            "AACCG",
            "AGGCG",
            "AGGCG",
            "AGGCG",
        ]

        result = greedy_motif_search_with_pseudocounts(dna, k, t)
        self.assertEqual(expected, result)

    def test_greedy_motif_search_with_pseudocounts_2(self):
        dna = [
            "GCACATCATTAAACGATTCGCCGCATTGCCTCGATAGGCG",
            "TCATAACTGACACCTGCTCTGGCACCGCTCATCCGTCGAA",
            "AAGCGGGTATAGCCAGATAGTGCCAATAATTTCCTTCGGC",
            "AGTCGGTGGTGAAGTGTGGGTTATGGGGAAAGGCAGACTG",
            "AACCGGACGGCAACTACGGTTACAACGCAGCAAGAATATT",
            "AGGCGTCTGTTGTTGCTAACACCGTTAAGCGACGGCAACT",
            "AAGCTTCCAACATCGTCTTGGCATCTCGGTGTGTGAGGCG",
            "AATTGAACATCTTACTCTTTTCGCTTTCAAAAAAAAGGCG",
        ]
        k = 5
        t = len(dna)
        expected = [
            "AGGCG",
            "TGGCA",
            "AAGCG",
            "AGGCA",
            "CGGCA",
            "AGGCG",
            "AGGCG",
            "AGGCG",
        ]
        result = greedy_motif_search_with_pseudocounts(dna, k, t)
        self.assertEqual(expected, result)

    def test_greedy_motif_search_with_pseudocounts_3(self):
        dna = [
            "GCACATCATTATCGATAACGATTCATTGCCAGGCGGCCGC",
            "TCATCGAATAACTGACACCTGCTCTGGCTCATCCGACCGC",
            "TCGGCGGTATAGCCAGATAGTGCCAATAATTTCCTAAGCG",
            "GTGGTGAAGTGTGGGTTATGGGGAAAGGCAGACTGAGTCG",
            "GACGGCAACTACGGTTACAACGCAGCAAGAATATTAACCG",
            "TCTGTTGTTGCTAACACCGTTAAGCGACGGCAACTAGGCG",
            "GCCAACGTAGGCGCGGCTTGGCATCTCGGTGTGTGAAGCG",
            "AAAGGCGCATCTTACTCTTTTCGCTTTCAAAAAAAAATTG",
        ]
        k = 5
        t = len(dna)
        expected = [
            "GGCGG",
            "GGCTC",
            "GGCGG",
            "GGCAG",
            "GACGG",
            "GACGG",
            "GGCGC",
            "GGCGC",
        ]
        result = greedy_motif_search_with_pseudocounts(dna, k, t)
        self.assertEqual(expected, result)

    def test_greedy_motif_search_with_pseudocounts_4(self):
        dna = [
            "GCACATCATTATCGATAACGATTCATTGCCAGGCGGCCGC",
            "TCATCGAATAACTGACACCTGCTCTGGCTCATCCGACCGC",
            "TCGGCGGTATAGCCAGATAGTGCCAATAATTTCCTAAGCG",
            "GTGGTGAAGTGTGGGTTATGGGGAAAGGCAGACTGAGTCG",
            "GACGGCAACTACGGTTACAACGCAGCAAGAATATTAACCG",
            "TCTGTTGTTGCTAACACCGTTAAGCGACGGCAACTAGGCG",
            "GCCAACGTAGGCGCGGCTTGGCATCTCGGTGTGTGAAGCG",
            "AAAGGCGCATCTTACTCTTTTCGCTTTCAAAAAAAAATTG",
        ]
        k = 3
        t = len(dna)
        expected = [
            "GGC",
            "GGC",
            "GGC",
            "GGC",
            "GGC",
            "GGC",
            "GGC",
            "GGC",
        ]
        result = greedy_motif_search_with_pseudocounts(dna, k, t)
        self.assertEqual(expected, result)

    def test_greedy_motif_search_with_pseudocounts_long(self):
        dna = [
            'GCGCCCCGCCCGGACAGCCATGCGCTAACCCTGGCTTCGATGGCGCCGGCTCAGTTAGGGCCGGAAGTCCCCAATGTGGCAGACCTTTCGCCCCTGGCGGACGAATGACCCCAGTGGCCGGGACTTCAGGCCCTATCGGAGGGCTCCGGCGCGGTGGTCGGATTTGTCTGTGGAGGTTACACCCCAATCGCAAGGATGCATTATGACCAGCGAGCTGAGCCTGGTCGCCACTGGAAAGGGGAGCAACATC',
            'CCGATCGGCATCACTATCGGTCCTGCGGCCGCCCATAGCGCTATATCCGGCTGGTGAAATCAATTGACAACCTTCGACTTTGAGGTGGCCTACGGCGAGGACAAGCCAGGCAAGCCAGCTGCCTCAACGCGCGCCAGTACGGGTCCATCGACCCGCGGCCCACGGGTCAAACGACCCTAGTGTTCGCTACGACGTGGTCGTACCTTCGGCAGCAGATCAGCAATAGCACCCCGACTCGAGGAGGATCCCG',
            'ACCGTCGATGTGCCCGGTCGCGCCGCGTCCACCTCGGTCATCGACCCCACGATGAGGACGCCATCGGCCGCGACCAAGCCCCGTGAAACTCTGACGGCGTGCTGGCCGGGCTGCGGCACCTGATCACCTTAGGGCACTTGGGCCACCACAACGGGCCGCCGGTCTCGACAGTGGCCACCACCACACAGGTGACTTCCGGCGGGACGTAAGTCCCTAACGCGTCGTTCCGCACGCGGTTAGCTTTGCTGCC',
            'GGGTCAGGTATATTTATCGCACACTTGGGCACATGACACACAAGCGCCAGAATCCCGGACCGAACCGAGCACCGTGGGTGGGCAGCCTCCATACAGCGATGACCTGATCGATCATCGGCCAGGGCGCCGGGCTTCCAACCGTGGCCGTCTCAGTACCCAGCCTCATTGACCCTTCGACGCATCCACTGCGCGTAAGTCGGCTCAACCCTTTCAAACCGCTGGATTACCGACCGCAGAAAGGGGGCAGGAC',
            'GTAGGTCAAACCGGGTGTACATACCCGCTCAATCGCCCAGCACTTCGGGCAGATCACCGGGTTTCCCCGGTATCACCAATACTGCCACCAAACACAGCAGGCGGGAAGGGGCGAAAGTCCCTTATCCGACAATAAAACTTCGCTTGTTCGACGCCCGGTTCACCCGATATGCACGGCGCCCAGCCATTCGTGACCGACGTCCCCAGCCCCAAGGCCGAACGACCCTAGGAGCCACGAGCAATTCACAGCG',
            'CCGCTGGCGACGCTGTTCGCCGGCAGCGTGCGTGACGACTTCGAGCTGCCCGACTACACCTGGTGACCACCGCCGACGGGCACCTCTCCGCCAGGTAGGCACGGTTTGTCGCCGGCAATGTGACCTTTGGGCGCGGTCTTGAGGACCTTCGGCCCCACCCACGAGGCCGCCGCCGGCCGATCGTATGACGTGCAATGTACGCCATAGGGTGCGTGTTACGGCGATTACCTGAAGGCGGCGGTGGTCCGGA',
            'GGCCAACTGCACCGCGCTCTTGATGACATCGGTGGTCACCATGGTGTCCGGCATGATCAACCTCCGCTGTTCGATATCACCCCGATCTTTCTGAACGGCGGTTGGCAGACAACAGGGTCAATGGTCCCCAAGTGGATCACCGACGGGCGCGGACAAATGGCCCGCGCTTCGGGGACTTCTGTCCCTAGCCCTGGCCACGATGGGCTGGTCGGATCAAAGGCATCCGTTTCCATCGATTAGGAGGCATCAA',
            'GTACATGTCCAGAGCGAGCCTCAGCTTCTGCGCAGCGACGGAAACTGCCACACTCAAAGCCTACTGGGCGCACGTGTGGCAACGAGTCGATCCACACGAAATGCCGCCGTTGGGCCGCGGACTAGCCGAATTTTCCGGGTGGTGACACAGCCCACATTTGGCATGGGACTTTCGGCCCTGTCCGCGTCCGTGTCGGCCAGACAAGCTTTGGGCATTGGCCACAATCGGGCCACAATCGAAAGCCGAGCAG',
            'GGCAGCTGTCGGCAACTGTAAGCCATTTCTGGGACTTTGCTGTGAAAAGCTGGGCGATGGTTGTGGACCTGGACGAGCCACCCGTGCGATAGGTGAGATTCATTCTCGCCCTGACGGGTTGCGTCTGTCATCGGTCGATAAGGACTAACGGCCCTCAGGTGGGGACCAACGCCCCTGGGAGATAGCGGTCCCCGCCAGTAACGTACCGCTGAACCGACGGGATGTATCCGCCCCAGCGAAGGAGACGGCG',
            'TCAGCACCATGACCGCCTGGCCACCAATCGCCCGTAACAAGCGGGACGTCCGCGACGACGCGTGCGCTAGCGCCGTGGCGGTGACAACGACCAGATATGGTCCGAGCACGCGGGCGAACCTCGTGTTCTGGCCTCGGCCAGTTGTGTAGAGCTCATCGCTGTCATCGAGCGATATCCGACCACTGATCCAAGTCGGGGGCTCTGGGGACCGAAGTCCCCGGGCTCGGAGCTATCGGACCTCACGATCACC',
        ]
        k = 15
        t = len(dna)
        expected_score = 35

        result = greedy_motif_search_with_pseudocounts(dna, k, t)
        print(result)
        self.assertEqual(expected_score, score(result, consensus(get_count(result))))
